<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">  <!--DTD Document Type Definition：文档类型定义 外部约束-->
<configuration>

    <!--引用数据库配置文件-->
    <properties resource="dbconfig.properties">
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </properties>

    <!--设置别名：可以为映射器 .xml 文件中指定类型设置别名-->
    <typeAliases>
        <typeAlias type="com.mybatis.project.bean.Student" alias="Student"/>
        <!--为映射器 .xml 文件中，指定包内的，类型设置别名，别名默认为类名 -->
        <!--<package name="com.mybatis.project.bean"/>-->
    </typeAliases>

    <!--environment 元素体：包含事务管理和连接池的配置
        默认使用的环境 ID：比如：default="development"
        每个 environment 元素定义的环境 ID：比如：id="development"
        todo  默认环境和环境 ID 可以随意命名，但要求默认的环境 ID 要匹配其中一个环境 ID
    -->
    <environments default="development">
        <!--环境配置：可以配置多个，来适应不同的数据库
            每个数据库对应一个 SqlSessionFactory 实例，每一个 SqlSessionFactory 实例对应一个 environment
        -->
        <environment id="development">
            <!-- 事务管理器 transactionManager type="JDBC|MANAGED"
                 JDBC：该配置直接使用 JDBC 的提交和回滚设施，依赖从数据源获得的连接来管理事务作用域
                 MANAGED：不作任何配置，从不提交或回滚一个连接，而是让容器（比如 Spring 或 J2EE 服务器）来管理事务的整个生命周期
                          默认情况下会关闭连接。如果一些容器并不希望连接被关闭，则需要将 closeConnection 属性设置为 false
                          <property name="closeConnection" value="false"/>
            -->
            <transactionManager type="JDBC"/>
            <!--数据源(dataSource)：dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源
                三种内建数据源： type="[UNPOOLED|POOLED|JNDI]"
                UNPOOLED：该数据源的实现会每次请求时打开和关闭连接
                POOLED：该数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创 建新的连接实例时所必需的初始化和认证时间
                JNDI：在容器中使用，容器可以集中或在外部配置数据源，通过放置一个 JNDI 上下文的数据源引用
                      该数据源配置只需两个属性：
                          initial_context – 该属性用来在 InitialContext 中寻找上下文，如果忽略，将会直接从InitialContext 中寻找 data_source 属性
                          data_source – 引用数据源实例位置的上下文路径，没有提供时则直接在 InitialContext 中查找
            -->
            <dataSource type="POOLED">
                <!--username 和 password 将会由 properties 元素中设置的相应值来替换
                driver 和 url 属性将会由 config.properties 文件中对应的值来替换-->
                <property name="driver" value="${mysql_driver}"/>
                <property name="url" value="${mysql_url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
                <!--
                    driver – 是 JDBC 驱动的 Java 类全限定名
                    url – 是数据库的 JDBC URL 地址
                    username – 登录数据库的用户名
                    password – 登录数据库的密码
                    defaultTransactionIsolationLevel – 默认的连接事务隔离级别
                    defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间(单位:毫秒)
                    poolMaximumActiveConnections – 在任意时间可存在的活动(正在使用)连接数量，默认值:10
                    poolMaximumIdleConnections – 任意时间可能存在的空闲连接数
                    poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出(checked out)时间，默认值:20000 毫秒(即 20 秒)
                    poolTimeToWait – 如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接，默认值:20000 毫秒(即 20 秒)
                    poolMaximumLocalBadConnectionTolerance – 一个关于坏连接容忍度的底层设置，作用于每一个尝试从缓存池获取连接的线程。
                            如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，
                            但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。默认值:3
                    poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。
                            默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息
                    poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句，默认值:false
                    poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以设置为和数据库连接超时时间一样，来避免不必要的侦测，
                            默认值:0(即所有连接每一时刻都被侦 测 — 当且仅当 poolPingEnabled 为 true 时适用)
                -->
            </dataSource>
        </environment>

    </environments>



    <!--
        数据库厂商标识 databaseIdProvider : 支持多厂商特性
        多厂商的支持是基于映射文件或接口中的语databaseId属性
        MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句
    -->

    <!--mappers 元素: 包含一组映射器(mapper)-->
    <mappers>
        <!--映射器的 XML 映射文件包含了 SQL 代码和映射定义信息-->
        <mapper resource="com/mybatis/project/mapper/StudentMapper.xml"/>
        <!-- 使用映射器接口实现类的完全限定类名 -->
        <!--<mapper class="com.mybatis.project.mapper.StudentMapper"/>-->
        <!-- 将包内的映射器接口实现全部注册为映射器 -->
        <!--<package name="com.mybatis.project.mapper"/>-->
    </mappers>

</configuration>